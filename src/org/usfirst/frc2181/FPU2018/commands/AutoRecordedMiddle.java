// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2181.FPU2018.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc2181.FPU2018.subsystems.*;
import java.util.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.IOException;

/**
 *
 */
public class AutoRecordedMiddle extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutoRecordedMiddle() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	RecordMiddle yeet = new RecordMiddle();
    	List<List<Integer>> Middle;
    	Middle = yeet.getList();
    	list = 0;
    	setTimeout(15);
    	while (timeSinceInitialized() < 15) {
    		data = 0;
    		while (data > 3) {
    			List<Integer> timeStamp = Middle.get(count);
    			double time = timeStamp.get(data);
    			if (timeSinceInitialzed() == time) {
    				
    			}
    		}
    	}
    	
    	

    	//setTimeout(15);
    	//FileInputStream fis = new FileInputStream("t.tmp");
    	//ObjectInputStream ois = new ObjectInputStream(fis);
    	//List<StartRecord> Left = (List<StartRecord>) ois.readObject();
    	//ois.close();
    	
    	
 
    }
}

