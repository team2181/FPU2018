// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2181.FPU2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2181.FPU2018.Robot;
import java.util.*;
import java.time.*;
import edu.wpi.first.wpilibj.Joystick; 
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.lang.Double;
/**
 *
 */
public class PlayAuto extends Command {
	
	private String path;
	private List<List<Double>> list;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public PlayAuto(String p) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	path = p;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    /*
	ArrayList time = new ArrayList();
	ArrayList axis0 = new ArrayList();
	ArrayList axis3 = new ArrayList();
	LocalDateTime iTime = LocalDateTime.now();
	double eTime = 0.0;
	double iSecond = iTime.getSecond();
	double iNano = iTime.getNano();
	double cSecond;
	double cNano;
	double eSecond;
	double eNano;
	*/
    
    //ArrayList list = new ArrayList();
	
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	FileInputStream fis = new FileInputStream(path);
    	ObjectInputStream ois = new ObjectInputStream(fis);
    	list = (List<List<Double>>) ois.readObject();
    	ois.close()
    }

    // Called repeatedly when this Command is scheduled to run
    //@Override
    protected void execute() {
    	/*
		LocalDateTime cTime = LocalDateTime.now();
		cSecond = cTime.getSecond();
		cNano = cTime.getNano();
		eSecond = cSecond - iSecond;
		if (eSecond < 0) {
			eSecond = (60 - iSecond) + cSecond;				
		}
		eNano = cNano - iNano;
		if (eNano < 0) {
			eNano = (1000000000 - iNano) + cNano;
			--eSecond;
		}
		eTime = eSecond + (eNano * 10E-10);
		System.out.println(eTime);
		time.add(eTime);
		axis0.add(j.getRawAxis(0));
		axis3.add(j.getRawAxis(3));
		*/
    	
    	//if (timeSinceInitialized() % .005 == 0) {
//    	List<Double> timeStamp = new ArrayList<Double>();
//    	timeStamp.add(timeSinceInitialized());
//    	timeStamp.add(j.getRawAxis(0));
//    	timeStamp.add(j.getRawAxis(3));
//    	list.add(timeStamp);
    	//}
    	while (list.get(0).get(0) <= timeSinceInitialized())
    		Robot.driveTrain.driveAuto(list.get(0).get(1)*-.75, list.get(0).get(2)*-.75);
    		list.remove(0);
		}
    

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (timeSinceInitialized() > 15.0 || list.isEmpty()) {
        	return true;
        } else {
        	return false;
        }
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	//System.out.println(Left);
    	Robot.driveTrain.driveAuto(0,0);
    }
    
//    List<List<Integer>> getList() {
//    	return Left;
//    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
    }
