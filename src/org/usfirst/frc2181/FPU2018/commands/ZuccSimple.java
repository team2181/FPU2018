// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2181.FPU2018.commands;
import edu.wpi.first.wpilibj.DriverStation;
import java.lang.String;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2181.FPU2018.Robot;

/**
 *
 */
public class ZuccSimple extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_time;
	private char m_side;
	private double m_dir;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ZuccSimple(double dir, double time, char side) {
    	
		m_dir = dir;
    	m_time = time;
    	m_side = side;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.zucc);
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if (DriverStation.getInstance().getGameSpecificMessage().charAt(0) == m_side) {
    		Robot.zucc.setSpin(0.7*m_dir);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	//if (Math.abs(Robot.driveTrain.getEncoder()) > Math.abs(dis/18.84956)) {
        //    return true;
        //} else {
    	if (timeSinceInitialized() >= m_time || DriverStation.getInstance().getGameSpecificMessage().charAt(0) != m_side) {
    		if (DriverStation.getInstance().getGameSpecificMessage().charAt(0) != m_side) {
    			System.out.println("Abort with param: Dir:"+m_dir+" Time:"+m_time+" Side:"+m_side);
    		}
    		return true;
    	} else {
        	return false;
        }
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.zucc.setSpin(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
